<style lang="less">
    view {
        box-sizing: border-box;
    }

    .container {
        height: 80vh;
        width: 80vw;
        margin: 10vh auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        position: relative;
        overflow: hidden;
        border: 1px solid #eee;
    }

    .current {
        width: 100%;
        height: 50px;
        border: 1px solid #ddd;
        background: #eee;
        margin: 0 auto;
        text-align: center;
        line-height: 50px;
    }

    .touch-move {
        position: absolute;
        opacity: 0.7;
    }

    .touch-end {
        position: static;
        opacity: 1;
    }

    /* 给这个元素一个上边距, 挤出个视觉上的空位 */
    .item-offset-y {
        margin-top: 50px;
    }
</style>

<template>
    <view class="container">
        <view disable-scroll="true" wx:for="{{list}}"
              @touchstart="onTouchStart"
              @touchmove="onTouchMove"
              @touchend="onTouchEnd"
              data-index="{{index}}"
              class="current {{currentItemIndex == index? 'touch-move':'touch-end'}} {{index == placeholderHelperItemIndex && currentItemIndex !== index? 'item-offset-y':''}}"
              style="top:{{currentItemOffsetY}}px;">
            {{item}}
        </view>
    </view>
</template>

<script>
  import wepy from 'wepy'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: 'drag-sort'
    }

    _touchClientY
    _currentItemInitialOffsetTop
    _currentItemOffsetY
    _currentItemIndex
    _currentItemNewIndex
    _itemHeight = 50
    _list = [1, 2, 3, 4, 5]

    data = {
      list: this._list.slice(0),
      currentItemIndex: null,
      currentItemOffsetY: null,
      placeholderHelperItemIndex: null
    }

    onLoad() {
      console.log('onLoad')
    }

    methods = {
      onTouchStart(e) {
        console.log('touchstart')
        // 记下拖动元素的位置
        this._currentItemIndex = e.target.dataset.index
        // 事件的起始位置
        this._touchClientY = e.touches[0].clientY
        // 元素的垂直位置
        this._currentItemInitialOffsetTop = e.currentTarget.offsetTop
      },
      onTouchMove(e) {
        console.log('touchmove')
        // 记下移动后的位置, 更新到视图
        this._currentItemOffsetY = this._currentItemInitialOffsetTop + (e.touches[0].clientY - this._touchClientY)

        this.currentItemIndex = this._currentItemIndex
        this.currentItemOffsetY = this._currentItemOffsetY

        // 根据元素高及元素的垂直位置算出元素下是哪个元素, 给它一个上边距, 挤出个视觉上的空位
        this._currentItemNewIndex = Math.ceil((this._currentItemOffsetY - this._itemHeight / 2) / this._itemHeight)
        this._currentItemNewIndex = this._currentItemNewIndex > this.data.list.length ? (this.data.list.length - 1) : this._currentItemNewIndex
        this._currentItemNewIndex = this._currentItemNewIndex <= 0 ? 0 : this._currentItemNewIndex
        if (this._currentItemNewIndex >= this._currentItemIndex) {
          this.placeholderHelperItemIndex = this._currentItemNewIndex + 1
        } else {
          this.placeholderHelperItemIndex = this._currentItemNewIndex
        }
        this.$apply()
      },
      onTouchEnd() {
        console.log('touchend')
        // 没有发生移动, 返回
        if (this.data.currentItemIndex === null) {
          return
        }
        let tempList = this.data.list.slice(0)
        // 移动元素, 更新到视图
        tempList.splice(this._currentItemIndex, 1)
        tempList.splice(this._currentItemNewIndex, 0, this._list[this._currentItemIndex])
        this._list = tempList.slice(0)
        this.list = tempList
        this.currentItemIndex = null
        this.currentItemOffsetY = null
        this.placeholderHelperItemIndex = null
        this.$apply()
      }
    }
  }
</script>
